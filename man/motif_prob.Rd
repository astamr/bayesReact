% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/motif_prob.R
\name{motif_prob}
\alias{motif_prob}
\title{Calculate the probability of motif occurrence in each sequence}
\usage{
motif_prob(
  motifs,
  seqs,
  seqlist,
  paths = T,
  binom_approx = F,
  cores = parallel::detectCores(),
  out_path = NULL,
  include_counts = T
)
}
\arguments{
\item{motifs}{A vector of motifs (e.g., c("ACGTAGT", "GTACAAG")) or an integer specifying the k-mers to be used (e.g., 7 for all 7-mers). A motif is specified as a regular expression with the alphabet {A,C,G,T}.}

\item{seqs}{A data frame with the columns: 'gid', 'sequence', and 'nchar' (generated by build_seq_list()).}

\item{seqlist}{A list of sequences (generated by build_seq_list()).}

\item{paths}{Boolean specifying whether the input data is provided as file paths or as R objects.}

\item{binom_approx}{Boolean specifying whether to use a binomial approximation to calculate motif probabilities or the default n-step TPM assuming an underlying markov chain. The binomial method assumes equal nucleotide frequencies
as well as a random and independent distribution of nucleotides in the sequence of interest. The approach is most appropriate when considering a large set of longer k-mers (> 7-mers). If binom_approx = T, 'motifs' has to be specified as a k-mer (e.g., motifs = 7 for all 7-mers).}

\item{cores}{Number of cores to use for parallelization. Consider increasing number of cores for large k-mers (default is the number of cores available).}

\item{out_path}{Path to output directory (default is NULL, where the output is returned rather than saved).}

\item{include_counts}{The default is TRUE and ensures that the matrix with motif counts is also returned. This parameter should ONLY be FALSE when running a light-weight approx. approach on a smaller computer.}
}
\value{
Two matrices, motif_probs and motif_counts, containing sequence-specific motif probabilities and motif counts, respectively.
}
\description{
This function calculates the probability of motif occurrence in each sequence and counts the number of non-overlapping motif occurrences.
The probability of motif occurrence is calculated using a Markov chain and becomes increasingly computationally exhaustive given the length and number of motifs.
Therefore, the function is parallelized to speed up computation, and at least 16 cores with 128 GB of RAM is recommended when running the function for all 7-mers.
}
\examples{
\dontrun{
motif_prob_count_lst <- motif_prob(motifs = c("ACGTAGT", "GTACAAG"),
seqs = "./seqs.rds", seqlist = "./seqlist.rds",
binom_approx = F, cores = 4)

motif_prob(motifs = 7, seqs = seqs, seqlist = seqlist, paths = F,
binom_approx = T, out_path = "./")
}


# ADD GREB TIL motif COUNTS!! (FAST WAY TO ENSURE ALSO GETTING COUNT DATA FOR APPROX APPROACH)
}
